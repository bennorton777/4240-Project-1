# High-level stuff
<tiger-program> := let <declaration-segment> in <stat-seq> end
<declaration-segment> := <type-declaration-list> <var-declaration-list> <funct-declaration-list>
<type-declaration-list> := NULL
<type-declaration-list> := <type-declaration> <type-declaration-list>
<var-declaration-list> := NULL
<var-declaration-list> := <var-declaration> <var-declaration-list>
<funct-declaration-list> := NULL
<funct-declaration-list> := <funct-declaration> <funct-declaration-list>

# Declarations
<type-declaration> := type id = <type> ;
<type> := <type-id>
<type> := array [INTLIT] of <type-id>
<type-id> := int
<type-id> := string
<type-id> := id

<var-declaration> := var <id-list> : <type-id> <optional-init> ;
<id-list> := id
<id-list> := id, <id-list>
<optional-init> := NULL
<optional-init> := <const>

<funct-declaration> := function id (<param-list>) <ret-type> begin <stat-seq> end ;
<param-list> := NULL
<param-list> := <param> <param-list-tail>
<param-list-tail> := NULL
<param-list-tail> := , <param> <param-list-tail>
<ret-type> := NULL
<ret-type> := : <type-id>
<param> := id : <type-id>

# Statements
<stat-seq> := <stat>
<stat-seq> := <stat> <stat-seq>
<stat> := <lvalue> := <expr> ;
<stat> := if <expr> then <stat-seq> endif ;
<stat> := if <expr> then <stat-seq> else <stat-seq> endif ;
<stat> := while <expr> do <stat-seq> enddo ;
<stat> := for id := <expr> to <expr> do <stat-seq> enddo ;
<stat> := id ( <expr-list> ) ;

# Expressions
<expr> := <or-term> <expr-tail>
<expr-tail> := NULL
<expr-tail> := | <or-term> <expr-tail>
<or-term> := <and-term> <or-term-tail>
<or-term-tail> := NULL
<or-term-tail> := & <and-term> <or-term-tail>
<and-term> := <comp-term> <and-term-tail>
<and-term-tail> := NULL
<and-term-tail> := <comp-op> <comp-term> #no recursion because comparison is non-associative
<comp-op> := =
<comp-op> := <>
<comp-op> := <
<comp-op> := >
<comp-op> := <=
<comp-op> := >=
<comp-term> := <term> <comp-term-tail>
<comp-term-tail> := NULL
<comp-term-tail> := <add-op> <term> <comp-term-tail>
<add-op> := +
<add-op> := -
<term> := <factor> <term-tail>
<term-tail> := NULL
<term-tail> := <mult-op> <factor> <term-tali>
<mult-op> := *
<mult-op> := /
<factor> := <const>
<factor> := <lvalue>
<factor> := - <factor>
<factor> := (<expr>)

<const> := INTLIT
<const> := STRLIT
<expr-list> := NULL
<expr-list> := <expr> <expr-list-tail>
<expr-list-tail> := , <expr> <expr-list-tail>
<expr-list-tail> := NULL
<lvalue> := id <lvalue-tail>
<lvalue-tail> := [<expr>] <lvalue-tail>
<lvalue-tail> := NULL
